name: Publish NuGet Packages & Release

on:
  push:
    tags:
      - 'v*'   # 例如 v3.2.6

permissions:
  contents: write  # 供 GitHub Release 使用

jobs:
  publish:
    runs-on: windows-latest
    timeout-minutes: 45
    env:
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      NUGET_PACKAGES: ~/.nuget/packages
      PROJECT_GLOB: "src/**/*.csproj"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('src/**/*.csproj', '**/Directory.Packages.props', '**/global.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # 逐專案平行還原（只掃描 src）
      - name: Restore (per project, parallel)
        shell: pwsh
        run: |
          $projs = Get-ChildItem -Path "src" -Recurse -Filter *.csproj | ForEach-Object FullName
          $tl = [Environment]::ProcessorCount
          $projs | ForEach-Object -Parallel {
            Write-Host "dotnet restore: $_"
            dotnet restore $_ -v minimal
          } -ThrottleLimit $tl

      # ✅ 關鍵：Build 階段覆寫 GeneratePackageOnBuild=false，避免 build 就打包
      - name: Build (per project, parallel)
        shell: pwsh
        run: |
          $projs = Get-ChildItem -Path "src" -Recurse -Filter *.csproj | ForEach-Object FullName
          $tl = [Environment]::ProcessorCount
          $projs | ForEach-Object -Parallel {
            Write-Host "dotnet build: $_"
            dotnet build $_ -c Release --no-restore -v minimal `
              -p:ContinuousIntegrationBuild=true `
              -p:GeneratePackageOnBuild=false
          } -ThrottleLimit $tl

      # 平行打包（只針對 src；跳過 IsPackable=false）
      - name: Pack (per project, parallel, no build)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ./nupkgs | Out-Null
          $projs = Get-ChildItem -Path "src" -Recurse -Filter *.csproj | ForEach-Object FullName
          $tl = [Environment]::ProcessorCount
          $projs | ForEach-Object -Parallel {
            $proj = $_
            $content = Get-Content -Raw -LiteralPath $proj
            if ($content -match '<IsPackable>\s*false\s*</IsPackable>') {
              Write-Host "Skip pack (IsPackable=false): $proj"
              return
            }
            Write-Host "dotnet pack: $proj"
            dotnet pack $proj -c Release -o ./nupkgs --no-build --no-restore -v minimal `
              -p:IncludeReferencedProjects=false `
              -p:ContinuousIntegrationBuild=true
          } -ThrottleLimit $tl

      - name: Upload nupkgs (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: ./nupkgs/*.nupkg

      - name: Publish to nuget.org
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path ./nupkgs -Filter *.nupkg
          if (-not $files) { Write-Error "No packages found to push."; exit 1 }
          dotnet nuget push "./nupkgs/*.nupkg" `
            --api-key "${{ secrets.NUGET_API_KEY }}" `
            --source "https://api.nuget.org/v3/index.json" `
            --skip-duplicate

  release:
    needs: publish   # 先完成 NuGet 發佈
    runs-on: windows-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            自動發佈 NuGet 套件（只打包 src 之下的專案）：
            - Bee.Api.AspNet
            - Bee.Api.AspNetCore
            - Bee.Api.Core
            - Bee.Base
            - Bee.Business
            - Bee.Cache
            - Bee.Connect
            - Bee.Db
            - Bee.Define
            - Bee.UI.Core
            - Bee.UI.WinForms

            如需安裝請至 NuGet.org 查詢對應版本。
