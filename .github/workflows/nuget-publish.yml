name: Publish NuGet Packages & Release

on:
  push:
    tags:
      - 'v*' # 例如 v3.2.6

permissions:
  contents: write  # for GitHub Release

jobs:
  publish:
    runs-on: windows-latest           # 需要建置 net48 / WinForms
    timeout-minutes: 45
    env:
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_MULTILEVEL_LOOKUP: 0
      NUGET_PACKAGES: ~/.nuget/packages

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: .NET info (diagnostics)
        shell: pwsh
        run: |
          dotnet --info
          dotnet nuget list source

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('src/**/*.csproj', '**/Directory.Packages.props', '**/global.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # 只打包 src/ 下這 11 個專案
      - name: Define project list
        id: proj
        shell: pwsh
        run: |
          $projects = @(
            "src/Bee.Api.AspNet/Bee.Api.AspNet.csproj",
            "src/Bee.Api.AspNetCore/Bee.Api.AspNetCore.csproj",
            "src/Bee.Api.Core/Bee.Api.Core.csproj",
            "src/Bee.Base/Bee.Base.csproj",
            "src/Bee.Business/Bee.Business.csproj",
            "src/Bee.Cache/Bee.Cache.csproj",
            "src/Bee.Connect/Bee.Connect.csproj",
            "src/Bee.Db/Bee.Db.csproj",
            "src/Bee.Define/Bee.Define.csproj",
            "src/Bee.UI.Core/Bee.UI.Core.csproj",
            "src/Bee.UI.WinForms/Bee.UI.WinForms.csproj"
          )
          $json = ($projects | ConvertTo-Json -Compress)
          echo "list=$json" >> $env:GITHUB_OUTPUT

      # ✅ Restore：序列 + 關閉 NuGet 內部平行；失敗時自動重試一次並輸出診斷
      - name: Restore (per project, sequential with retry)
        shell: pwsh
        run: |
          $projs = (ConvertFrom-Json '${{ steps.proj.outputs.list }}') | ForEach-Object { (Resolve-Path $_).Path }
          foreach ($p in $projs) {
            Write-Host "dotnet restore: $p"
            $args = @("$p","-v","minimal","--disable-parallel","-p:RestoreUseStaticGraphEvaluation=true","--source","https://api.nuget.org/v3/index.json")
            $res = dotnet restore @args
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "First restore failed for $p. Retrying with diagnostic logs..."
              dotnet restore $p -v diag --disable-parallel --source https://api.nuget.org/v3/index.json -p:RestoreUseStaticGraphEvaluation=true
              if ($LASTEXITCODE -ne 0) { throw "Restore failed for $p." }
            }
          }

      # ✅ Build：平行、不要再還原（避免 NuGet.RestoreEx.targets race）
      - name: Build (per project, parallel, no-restore)
        shell: pwsh
        run: |
          $projs = (ConvertFrom-Json '${{ steps.proj.outputs.list }}') | ForEach-Object { (Resolve-Path $_).Path }
          $tl = [Environment]::ProcessorCount
          $projs | ForEach-Object -Parallel {
            Write-Host "dotnet build (no-restore): $_"
            dotnet build $_ -c Release --no-restore -v minimal `
              -p:ContinuousIntegrationBuild=true `
              -p:GeneratePackageOnBuild=false
          } -ThrottleLimit $tl

      # 📦 Pack：平行、--no-build/--no-restore，固定輸出到 nupkgs；跳過 IsPackable=false
      - name: Pack (per project, parallel, no build)
        shell: pwsh
        run: |
          $out = Join-Path $PWD 'nupkgs'
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          $projs = (ConvertFrom-Json '${{ steps.proj.outputs.list }}') | ForEach-Object { (Resolve-Path $_).Path }
          $tl = [Environment]::ProcessorCount
          $projs | ForEach-Object -Parallel {
            $proj = $_
            $content = Get-Content -Raw -LiteralPath $proj
            if ($content -match '<IsPackable>\s*false\s*</IsPackable>') {
              Write-Host "Skip pack (IsPackable=false): $proj"
              return
            }
            Write-Host "dotnet pack: $proj"
            dotnet pack $proj -c Release --no-build --no-restore -v minimal `
              -o $using:out `
              -p:PackageOutputPath="$using:out" `
              -p:IncludeReferencedProjects=false `
              -p:ContinuousIntegrationBuild=true
          } -ThrottleLimit $tl

      # 🧹 保險網：把 bin/Release 可能產生的 nupkg 也收攏
      - name: Collect nupkgs from bin/Release
        shell: pwsh
        run: |
          $out = Join-Path $PWD 'nupkgs'
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Get-ChildItem -Path "src" -Recurse -Include *.nupkg | Copy-Item -Destination $out -Force -ErrorAction SilentlyContinue
          Write-Host "Collected packages:"
          Get-ChildItem $out -Filter *.nupkg | ForEach-Object { Write-Host " - $($_.FullName)" }

      - name: Upload nupkgs (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: ./nupkgs/*.nupkg

      - name: Publish to nuget.org
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path ./nupkgs -Filter *.nupkg
          if (-not $files) { Write-Error "No packages found to push."; exit 1 }
          dotnet nuget push "./nupkgs/*.nupkg" `
            --api-key "${{ secrets.NUGET_API_KEY }}" `
            --source "https://api.nuget.org/v3/index.json" `
            --skip-duplicate

  release:
    needs: publish
    runs-on: windows-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            自動發佈 NuGet 套件（只打包 src 之下的專案）：
            - Bee.Api.AspNet
            - Bee.Api.AspNetCore
            - Bee.Api.Core
            - Bee.Base
            - Bee.Business
            - Bee.Cache
            - Bee.Connect
            - Bee.Db
            - Bee.Define
            - Bee.UI.Core
            - Bee.UI.WinForms

            如需安裝請至 NuGet.org 查詢對應版本。
